1.  同步VS异步
    e.g. AJAX
    - 浏览器的JS实在单线程中执行的（Web worker提供了多线程支持）
    - M+N vs. max(M,N)
2.  常见的异步机制：信号，消息（事件), 回调等。
3.  异步I/O
    - node是首个将异步作为主要的设计方式和设计理念的平台
    - IO类型：CPU一级缓存，CPU二级缓存，内存, 硬盘, 网络
    - 多线程的问题(线程的开销,上下文切换,锁,同步)
    - I/O与CPU可同步进行， 异步I/O的提出是希望I/O调用不会阻塞后续的计算，等待I/O的时间分配给其他业务。
    - 异步/同步 与 阻塞/非阻塞是两回事，从OS的角度讲只有阻塞和非阻塞两种I/O.
    - 说node是单线程是指执行javascript的线程，I/O是多线程的，这部分由系统内核管理。
4.  Node中异步
    - 事件循环
      - node启动后会进入一个while(true)的时间循环
      - 每一次循环叫一次tick,在每个循环中看是否有事件需要处理，如果有就会执行相关的回调
    - 观察者（其实就是存放I/O事件的队列）
      生产消费者模式
    - 请求对象 ==> event object(request object, data)
5.  异步编程的挑战：
    - 流程控制（非线性思维）
        1. 事件的发布／订阅 （Events, eventproxy, event-emitter）, 关注事件的设计，事件点预示着应用到达某一个状态，联想生命周期，例如ajax, http.request
        如果事件过多，会导致内存泄漏，过多占用cpu的情景。
        https://nodejs.org/api/events.html
        利用时间队列解决雪崩问题（events.EventEmitter.once()）
        多事件的协作
        2. Promise/Defferred 异步调用，延时传递
          - http://wiki.commonjs.org/wiki/Promises
            如果一个函数接受一个Promise作为输入，则必须返回一个Promise,同事注意对不可预测的错误处理，不要把原始的
            Promise直接返回。
          Defferred维护异步模型的状态
          - Promise/A
            http://wiki.commonjs.org/wiki/Promises/A
            三个状态： 未完成， 完成，失败
            状态转换： 未完成 -> 完成|失败
            状态一旦转换，将不能改变
            Promise对象只要具备then()方法即可，
            then(fulfilledHandler, errorHandler, progressHandler)
            then方法继续返回Promise
          - e.g.
           $.get('')
            .success()
            .fail()

           function PasswordChecker(accounts) {
                return function (user, password) {
                      var passwordHash = Q.get(accounts, user);
                        return when(passwordHash, function (passwordHash) {
                          if (hash(password) === passwordHash)
                            return true;
                         };
              };
            }
          - separate resolving from observing resolution
          - Libraries： q，when, node-promise, jQuery, mocha-as-promised
          - Promise多异步的协调, Promise其实就是队列处理
        - Promises/B
          http://wiki.commonjs.org/wiki/Promises/B
          module: q
    - 事件驱动
    - 函数式编程
    - 调试
    - 嵌套过深
    - 阻塞代码
      setTimeout
    - 异常的处理
      原则1: 必须执行传入的callback
      原则2: 正确传递回异常供调用者判断
      原则3: 确保callback只调用一次
      example 1：
       var async = function (callback) {
        process.nextTick(function() {
            var results = something;
            if (error) {
                return callback(error);
            }
            callback(null, results);
        });
       };
       example 2:
       try {
        doSomething();
       } catch (err) {
        return callback(err);
       }
       callback();
6.  高阶函数（函数即可为参数也可返回）
    - forEach, map, reduce, reduceRight, filter, every, some
7.  后续传递风格 - 进业务重点从返回值转到回调函数。
8.  Events
9.  将大量计算分为小量通过setImmediate调度
10. js流程控制之尾触发(next) - 流式处理
    libraries: async, step
11. 异步并发控制
    - 通过队列来控制
    - 如果当前异步调用量小于限定值，从队列去除执行
    - 如果队列调用量达到限定值，调用暂时加入队列
    - 每个异步调用结束时，从新的队列取出调用
    - 超时控制
